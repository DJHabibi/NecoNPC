//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input actions/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""3d1cc063-282b-48bf-a2c7-9496c269f675"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9c4fd997-c833-4fbd-90a1-858f3d8a2f35"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack1/Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""b16ea010-2f86-45e2-8b6a-36a6d3327f0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bc391504-f549-4dc7-a061-55ac65acd790"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""59aab612-56f1-4a36-ab72-af372d097b14"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c856a040-3abb-4440-ba8d-dd2f8942beca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f464dccf-5419-4c8a-9776-a86f3999412f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1e26af1-e9fb-48fa-b6d4-6e52720ddd86"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ab1471fd-8764-4846-9f0d-64a025795475"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""26af02aa-7894-4bb9-b2e4-fd6d46ec6358"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack1/Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e744b563-e646-4fd6-a723-314e7481aa33"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack1/Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1fad50f-186b-4bfa-b714-2cca4b373bd1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chat Inputs"",
            ""id"": ""d0d2f341-912f-4725-9d0c-cd6edfe4652a"",
            ""actions"": [
                {
                    ""name"": ""Chat"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cda6ca37-422f-4615-824a-a1ea1e639169"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SendChat"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f3baca08-237a-4a08-bc35-077a57f1783b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a7cac3b-212c-46dc-8e01-f4cece88609f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daae55d1-a3ae-465a-ab8b-5395c9e22691"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Attack1Attack2 = m_PlayerMovement.FindAction("Attack1/Attack2", throwIfNotFound: true);
        m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
        // Chat Inputs
        m_ChatInputs = asset.FindActionMap("Chat Inputs", throwIfNotFound: true);
        m_ChatInputs_Chat = m_ChatInputs.FindAction("Chat", throwIfNotFound: true);
        m_ChatInputs_SendChat = m_ChatInputs.FindAction("SendChat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Attack1Attack2;
    private readonly InputAction m_PlayerMovement_Camera;
    public struct PlayerMovementActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerMovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Attack1Attack2 => m_Wrapper.m_PlayerMovement_Attack1Attack2;
        public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack1Attack2.started += instance.OnAttack1Attack2;
            @Attack1Attack2.performed += instance.OnAttack1Attack2;
            @Attack1Attack2.canceled += instance.OnAttack1Attack2;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack1Attack2.started -= instance.OnAttack1Attack2;
            @Attack1Attack2.performed -= instance.OnAttack1Attack2;
            @Attack1Attack2.canceled -= instance.OnAttack1Attack2;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Chat Inputs
    private readonly InputActionMap m_ChatInputs;
    private List<IChatInputsActions> m_ChatInputsActionsCallbackInterfaces = new List<IChatInputsActions>();
    private readonly InputAction m_ChatInputs_Chat;
    private readonly InputAction m_ChatInputs_SendChat;
    public struct ChatInputsActions
    {
        private @PlayerInputs m_Wrapper;
        public ChatInputsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Chat => m_Wrapper.m_ChatInputs_Chat;
        public InputAction @SendChat => m_Wrapper.m_ChatInputs_SendChat;
        public InputActionMap Get() { return m_Wrapper.m_ChatInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatInputsActions set) { return set.Get(); }
        public void AddCallbacks(IChatInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_ChatInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChatInputsActionsCallbackInterfaces.Add(instance);
            @Chat.started += instance.OnChat;
            @Chat.performed += instance.OnChat;
            @Chat.canceled += instance.OnChat;
            @SendChat.started += instance.OnSendChat;
            @SendChat.performed += instance.OnSendChat;
            @SendChat.canceled += instance.OnSendChat;
        }

        private void UnregisterCallbacks(IChatInputsActions instance)
        {
            @Chat.started -= instance.OnChat;
            @Chat.performed -= instance.OnChat;
            @Chat.canceled -= instance.OnChat;
            @SendChat.started -= instance.OnSendChat;
            @SendChat.performed -= instance.OnSendChat;
            @SendChat.canceled -= instance.OnSendChat;
        }

        public void RemoveCallbacks(IChatInputsActions instance)
        {
            if (m_Wrapper.m_ChatInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChatInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_ChatInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChatInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChatInputsActions @ChatInputs => new ChatInputsActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack1Attack2(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface IChatInputsActions
    {
        void OnChat(InputAction.CallbackContext context);
        void OnSendChat(InputAction.CallbackContext context);
    }
}
